#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# pylint: disable=invalid-name
"""
This is a script to build the project.

It is using template_BUILDME_python3 v8.

This script:
	- Should be named "BUILDME"
	- Should be present in the project root folder
	- Should be executable (chmod +x BUILDME)
	- Should contains all the project build process steps implemented into the function BUILDME (see below)
"""

import sys; sys.dont_write_bytecode = True; sys.stdout.reconfigure(encoding="utf-8")  # type: ignore[attr-defined]  # noqa: E702 F821

from typing import List  # pylint: disable=wrong-import-position
from typing import Optional  # pylint: disable=wrong-import-position
from typing import Sequence  # pylint: disable=wrong-import-position
from typing import Tuple  # pylint: disable=wrong-import-position
import argparse  # pylint: disable=wrong-import-position
import os  # pylint: disable=wrong-import-position
import pathlib  # pylint: disable=wrong-import-position
import shutil  # pylint: disable=wrong-import-position
import tempfile  # pylint: disable=wrong-import-position

from contextlib import ExitStack  # pylint: disable=wrong-import-position
from contextlib import suppress  # pylint: disable=wrong-import-position

S_USE_RAM_TEMP_FOLDER: bool = True


def BUILDME(s: pathlib.Path, t: pathlib.Path, o: pathlib.Path) -> int:  # pylint: disable=C0103
	"""
	Build the project.

	@param s The project root folder, the build steps shall only access this folder in read only mode
	@param t A folder where the build steps are free to write temporary file/folder
	@param o A folder where the build result should be written to
	@returns Exit code 0 on success or raise an Exception if something failed
	"""
	# TODO: The build steps to build the project shall be implemented here (within the BUILDME function)
	return 0

########################################################
########################################################
############################
# Copy this template build executable to your own project root folder
# Anything above this line is considered part of your project
# Anything below this line is part of the BUILDME project <https://github.com/elarivie/BUILDME> and is licensed under GPLv3
# Note: You don't have to edit anything below this line, if you have to, please fill an issue at https://github.com/elarivie/BUILDME
############################
########################################################
########################################################


def find_ram_temp() -> Optional[pathlib.Path]:
	"""Find the RAM temp folder, returns None if not found."""
	try:
		# Use RAM temp folder if available
		result = pathlib.Path(os.sep, "run", "user", str(os.getuid()))
		return result if result.is_dir() else None
	except AttributeError:
		return None  # os.getuid() is only available on Unix (it is the only os which might have a ram temp folder anyway)


def purge(path_to_purge: Optional[pathlib.Path]) -> None:
	"""Purge 'something' on disk or throws an AssertionError if it fails to do so."""
	# Sometimes removing an element from disk fails.
	# Known possible cause:
	#
	# - Permission issue
	# - On OS Windows if the cwd is within the folder being deleted
	# - On OS Windows if the element is or contains long file path
	#
	# This purge method will therefore be proactive and attempt to clear as much as possible using other strategies
	#  Since the element destiny is to be deleted we can alter its content:
	#
	#  1- Adjust permission
	#  2- Wipe the content of files(to make sure no secret are exposed even if an element can't be deleted).
	#  3- Rename folder content element to "A" (to reduce file path length and to make sure no secret are exposed)
	#  - At the end only only the problematic elements will remain on disk.
	if path_to_purge is None: return
	if not path_to_purge.exists(): return

	if True:  # Happy path.
		with suppress(BaseException): path_to_purge.unlink()
		with suppress(BaseException): shutil.rmtree(path_to_purge)
		if not path_to_purge.exists(): return

		with suppress(BaseException): os.lchown(path_to_purge, os.getuid(), os.getgid())  # Adjust ownership.

		original_cwd: pathlib.Path = pathlib.Path.cwd()
	try:
		os.chdir(pathlib.Path("/"))  # Move the current working directory away
		if path_to_purge.is_dir() and not path_to_purge.is_symlink():
			with suppress(BaseException): path_to_purge.chmod(0o700)  # Adjust permission.
			with suppress(BaseException): list(map(purge, list(path_to_purge.iterdir())))  # Clear content
			for child_to_purge in path_to_purge.iterdir(): purge(child_to_purge)
			with suppress(BaseException): path_to_purge.rmdir()  # Quick delete attempt.

			with suppress(BaseException): map(lambda x: x.replace(x.with_name("A")), path_to_purge.iterdir())  # type: ignore[misc]  # NOQA  # Reduce file path length of the content.
		else:
			with suppress(BaseException): path_to_purge.chmod(0o600)  # Adjust permission.
			with suppress(BaseException): path_to_purge.unlink()  # Quick delete attempt.
			if path_to_purge.is_file() and not path_to_purge.is_symlink():
				with suppress(BaseException): open(path_to_purge, "w").close()  # Clear the content.
	finally:
		with suppress(BaseException): path_to_purge.unlink()  # Quick delete attempt.
		with suppress(BaseException): path_to_purge.rmdir()  # Quick delete attempt.
		with suppress(BaseException): os.chdir(original_cwd)  # Restore original current working directory (if it still exists).

		if path_to_purge.exists(): raise AssertionError(f"Can't delete â€” {path_to_purge}")


def main(p_args: Sequence[str]) -> int:
	"""Main."""
	exit_code: Optional[int] = None

	parser = argparse.ArgumentParser(description="Build the project", epilog="Exit code 0 if build is successfull\n\n")
	parser.add_argument("-s", help="source folder (Default: Current working directory)", action="store", default=pathlib.Path.cwd())
	parser.add_argument("-t", help="temporary folder (Default: new temporary directory in the system temporary directory or RAM temp folder if available)", action="store", default=None)
	parser.add_argument("-o", help="output folder, shall not already exist (Default: new temporary directory in TEMPFOLDER)", action="store", default=None)
	parser.add_argument("-V", "--version", action="version", version="BUILDME 2.0.0")
	c_args = parser.parse_args(p_args)

	c_path: List[Optional[pathlib.Path]] = list(map(lambda x: None if x is None else pathlib.Path(x).resolve(), iter((c_args.s, c_args.t, c_args.o))))

	if c_path[2] is not None:
		c_path[2].mkdir()  # Create the output file as requested (crash if it already exists)

	if c_path[1] is None and S_USE_RAM_TEMP_FOLDER:
		# Use RAM temp folder if available.
		c_path[1] = find_ram_temp()

	with ExitStack() as stack:  # Handle the current working directory.
		c_orig_cwd: pathlib.Path = pathlib.Path.cwd()
		stack.callback(lambda: os.chdir(c_orig_cwd))

		with ExitStack() as stack:  # Handle the temporary folder.
			v_tmp_path: pathlib.Path = pathlib.Path(tempfile.mkdtemp(suffix="", prefix="", dir=c_path[1]))
			stack.callback(lambda: purge(v_tmp_path))

			c_path[1] = None
			c_path_final: Tuple[pathlib.Path, ...] = tuple(map(lambda x: x if x is not None else pathlib.Path(str(tempfile.mkdtemp(suffix="", prefix="", dir=v_tmp_path))), iter(c_path)))
			c_path_final = (c_path_final[0], c_path_final[1], c_path_final[2])
			os.chdir(c_path_final[1])  # Make sure that the current working directory is set to the Temp folder before doing the build steps
			exit_code = BUILDME(*c_path_final)
	if exit_code is None: raise AssertionError()
	return exit_code


if "__main__" == __name__:
	sys.exit(main(sys.argv[1:]))
