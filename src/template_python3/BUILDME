#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
This is a script to build the project.

It is using template_BUILDME_python3 v6.

This script:
	- Should be named "BUILDME"
	- Should be present in the project root folder
	- Should be executable (chmod +x BUILDME)
	- Should contains all the project build process steps implemented into the function BUILDME (see below)
"""

from typing import Sequence
from typing import Optional

def BUILDME(s: str, t: str, o: str) -> int:
	"""
	Build the project.

	@param s The project root folder, the build steps shall only access this folder in read only mode
	@param t A folder where the build steps are free to write temporary file/folder
	@param o A folder where the build result should be written to
	@returns Exit code 0 on success or raise an Exception if something failed
	"""
	#TODO: The build steps to build the project shall be implemented here (within the BUILDME function)
	return 0

########################################################
########################################################
############################
############################ Copy this template build executable to your own project root folder
############################ Anything above this line is considered part of your project
############################ Anything below this line is part of the BUILDME project <https://github.com/elarivie/BUILDME> and is licensed under GPLv3
############################ Note: You don't have to edit anything below this line, if you have to, please fill an issue at https://github.com/elarivie/BUILDME
############################
########################################################
########################################################
def main(p_Args: Sequence[str]) -> int:
	"""Main."""
	import argparse
	parser = argparse.ArgumentParser(
		description="Build the project"
		, epilog="""
Exit code 0 if build is successfull
"""
	)
	import os
	parser.add_argument("-s", help="source folder (Default: Current working directory)", action="store", default=os.getcwd())
	parser.add_argument("-t", help="temporary folder (Default: new temporary directory in the system temporary directory or RAM temp folder if available)", action="store", default=None)
	parser.add_argument("-o", help="output folder, shall not already exist (Default: new temporary directory in TEMPFOLDER)", action="store", default=None)
	parser.add_argument("-V", "--version", action="version", version="BUILDME 2.0.0")
	c_Args = parser.parse_args(p_Args)
	def _actualpath(p_Path: Optional[str]) -> Optional[str]:
		return None if p_Path is None else os.path.normcase(os.path.realpath(os.path.normpath(p_Path)))

	c_path = [_actualpath(x) for x in [c_Args.s, c_Args.t, c_Args.o]]

	if c_path[1] is None:
		try:
			#Use RAM temp folder if available
			c_path[1] = os.path.abspath(os.path.join(os.sep, "run", "user", str(os.getuid())))
			if not os.path.isdir(c_path[1]):
				c_path[1] = None
		except AttributeError:
			pass#os.getuid() is only available on Unix (it is the only os which might have a ram temp folder anyway)
	v_BuildResult = None
	c_OrigCWD = os.getcwd()
	v_TmpPath = None
	v_BuildError = True
	try:
		import tempfile
		with tempfile.TemporaryDirectory(suffix="", prefix="", dir=c_path[1]) as c_TmpFolder:
			v_TmpPath = _actualpath(c_TmpFolder)
			try:
				c_path[1] = None
				for i in [0, 1, 2]:
					if c_path[i] is None:
						c_path[i] = _actualpath(tempfile.mkdtemp(suffix="", prefix="", dir=v_TmpPath))

				os.chdir(c_path[1])#Make sure that the current working directory is the Temp folder before doing the build steps
				v_BuildResult = BUILDME(*c_path)
				#From this point, the only thing left to do is to delete the temp folder
				v_BuildError = False
			finally:
				if _actualpath(os.getcwd()).startswith(v_TmpPath + os.sep):
					os.chdir(c_OrigCWD)#Get out of the temp folder since it is about to be deleted
	except Exception:
		if v_BuildError:
			raise
		else:
			pass#Problem cleaning temp folder... will be handled in the finally block
	finally:
		if v_TmpPath is not None and os.path.isdir(v_TmpPath):
			#Failed to remove temp folder
			# Known possible cause:
			# - On OS Windows if the Tmp folder contains element with long file path
			# Will now attempt other strategies to to clean up as much as possible
			# Since the temp folder destiny is to be deleted we can alter its content
			#  Walk multiple time the temp directory:
			#  - Remove each file and folder specifically
			#  - If delete is not possible, rename them with a shorter name
			#  The objective is to:
			#  - Reduce as much as possible the file path length
			#  - Keep only the problematic files/folder
			try:
				v_SawImprovement = True
				while v_SawImprovement:
					v_SawImprovement = False
					for c_Root, c_Dirs, c_Files in os.walk(v_TmpPath, topdown=False):
						for c_Name in c_Files:
							try:
								os.unlink(os.path.join(c_Root, c_Name))
								v_SawImprovement = True
							except Exception:
								try:
									os.replace(os.path.join(c_Root, c_Name), os.path.join(c_Root, "A"))#Rename to a single character name
									v_SawImprovement = True
								except Exception:
									pass#Will retry later
						for c_Name in c_Dirs:
							try:
								os.rmdir(os.path.join(c_Root, c_Name))
								v_SawImprovement = True
							except Exception:
								try:
									os.replace(os.path.join(c_Root, c_Name), os.path.join(c_Root, "A"))#Rename to a single character name
									v_SawImprovement = True
								except Exception:
									pass#Will retry later
				os.rmdir(v_TmpPath)#Give it a try now that the content might have been deleted
			except Exception:
				pass#This is not a reason to fail the build yet...
			if os.path.exists(v_TmpPath):
				#Strangely the temp folder is still present...
				#No known reason to reach this area but will try other strategies anyway
				import shutil
				try:
					shutil.rmtree(v_TmpPath)#Try a deep delete of the temp folder.
				except Exception:
					pass#This is not a reason to fail the build yet...
				if os.path.exists(v_TmpPath):
					import time
					time.sleep(5)#In last resort give five seconds to other processes and the OS to breath in case they need to cleanly release their handle on the temp folder
					shutil.rmtree(v_TmpPath)#Last chance to delete temp, if it does not work, it will throw an exception to the user... we did our best.
	assert not os.path.exists(v_TmpPath), "Temp folder could not be cleaned: " + str(v_TmpPath)
	return v_BuildResult

if "__main__" == __name__ :
	import sys
	sys.dont_write_bytecode = True
	sys.exit(main(sys.argv[1:]))
