#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
	This is a script to build the project
	
	it is using template_build_python3 v2

	This script:
		- Should be named "build"
		- Should be present at the project root folder
		- Should be executable (chmod +x build)
		- Should contains all the project build process steps implemented into the function build (see below)
"""

def build(p_Src, p_Tmp, p_Out):
	"""
		Build the project
		@param p_Src The project root folder, the build steps shall only access this folder in read only mode
		@param p_Tmp A folder where the build steps are free to write temporary file/folder
		@param p_Out A folder where the build result should be written to
		@returns Exit code 0 on success or raise an Exception if something failed
	"""
	import os
	import shutil
	for c_CurrFile in ["template_build_dash", "template_build_python3"]:
		shutil.copy(os.path.join(p_Src, "src", c_CurrFile), os.path.join(p_Out, c_CurrFile))
	return 0

###Settings

####Validate that the SRC folder is not altered by the build steps. (Default = True)
#S_SrcHashValidation = False

########################################################
########################################################
############################
############################ Copy this template build executable to your own project root folder
############################ Anything above this line is considered part of your project
############################ Anything below this line is part of the build project <https://github.com/elarivie/build> and is licensed under GPLv3
############################ Note: You don't have to edit anything below this line, if you have to, please fill an issue at https://github.com/elarivie/build
############################
########################################################
########################################################
def main(p_Args):
	import argparse
	parser = argparse.ArgumentParser(
		description='Build the project'
		, epilog='''
Exit code 0 if build is successfull
'''
	)
	import os
	parser.add_argument('-s', '--source', help='source folder (Default: Current working directory)', action='store', default=os.getcwd())
	parser.add_argument('-t', '--temp', help='temporary folder (Default: new temporary directory in the system temporary directory)', action='store', default=None)
	parser.add_argument('-o', '--output', help='output folder, shall not already exist (Default: new temporary directory in TEMPFOLDER)', action='store', default=None)
	parser.add_argument('-O', '--Output', help='output folder, shall already exist (Default: --output)', action='store', default=None)
	parser.add_argument('-V', '--version', action='version', version='build 1.1')
	c_Args = parser.parse_args(p_Args)
	def _actualpath(p_Path):
		return None if p_Path is None else os.path.normcase(os.path.realpath(os.path.normpath(p_Path)))
	def _processDirectoryHash(p_Path):
		"""
			Walk the directory tree and process a hash
			@p_Path The directory to process a hash base on its content
			@return The Hash (sha512)
		"""
		if p_Path is None:
			return 0
		import hashlib
		c_CheckSum = hashlib.sha512()
		for c_Root, c_Dirs, c_Files in os.walk(p_Path, followlinks=False):
			for c_Name in c_Files:
				c_CheckSum.update(c_Name.encode('utf-8'))#Use the file name
				c_CurrPath = os.path.join(c_Root, c_Name)
				#c_CheckSum.update(str(os.path.getsize(c_CurrPath)).encode('utf-8'))#Use the file size
				with open(c_CurrPath, 'rb') as c_CurrentFile:
					while True:
						v_Buffer = c_CurrentFile.read(8192)
						if len(v_Buffer) > 0:
							c_CheckSum.update(v_Buffer)#Use the file content
						else:
							break
			for c_Name in c_Dirs:
				c_CheckSum.update(c_Name.encode('utf-8'))#Use the directory name
				c_CurrPath = os.path.join(c_Root, c_Name)
				if not os.path.islink(c_CurrPath):
					c_CheckSum.update(_processDirectoryHash(c_CurrPath).encode('utf-8'))#Use the directory content
		return c_CheckSum.hexdigest()
	c_ActualPathSrc = _actualpath(c_Args.source)
	c_ActualPathTmp = _actualpath(c_Args.temp)
	c_ActualPathOut = _actualpath(c_Args.output)
	v_NeedToCreateOut = True
	if c_ActualPathOut is None:
		c_ActualPathOut = _actualpath(c_Args.Output)
		v_NeedToCreateOut = False
		assert (c_ActualPathOut is None) or (os.path.isdir(c_ActualPathOut)), "The output folder has to be a folder"
	import tempfile
	v_BuildResult = None
	with tempfile.TemporaryDirectory(suffix='', prefix='', dir=c_ActualPathTmp) as c_TmpFolder:
		if c_ActualPathOut is None:
			v_NeedToCreateOut = False
			c_ActualPathOut = tempfile.mkdtemp(suffix='', prefix='', dir=c_TmpFolder)
		if c_ActualPathSrc is None:
			c_ActualPathSrc = tempfile.mkdtemp(suffix='', prefix='', dir=c_TmpFolder)
		assert os.path.isdir(c_ActualPathSrc), "The source folder has to be a folder"
		assert (c_ActualPathTmp is None) or os.path.isdir(c_ActualPathTmp), "The temporary folder has to be a folder"
		assert (c_ActualPathTmp is None) or not c_ActualPathTmp.startswith(c_ActualPathSrc + os.sep), "The temporary folder cannot be within the source folder"
		assert not c_ActualPathOut.startswith(c_ActualPathSrc + os.sep), "The output folder cannot be within the source folder"
		assert not c_ActualPathSrc.startswith(c_ActualPathOut + os.sep), "The source folder cannot be within the output folder"
		assert (c_ActualPathTmp is None) or not c_ActualPathTmp.startswith(c_ActualPathOut + os.sep), "The temporary folder cannot be within the output folder"
		if v_NeedToCreateOut:
			os.makedirs(c_ActualPathOut, exist_ok=False)
		assert os.path.isdir(c_ActualPathOut), "The output folder has to be a folder"
		v_DoSrcHashValidation = True
		try:
			v_DoSrcHashValidation = S_SrcHashValidation
		except NameError:
			pass
		c_SrcHash = _processDirectoryHash(c_ActualPathSrc) if v_DoSrcHashValidation else 0
		v_BuildResult = build(c_ActualPathSrc, tempfile.mkdtemp(suffix='', prefix='', dir=c_TmpFolder), c_ActualPathOut)
	assert c_SrcHash == (_processDirectoryHash(c_ActualPathSrc) if v_DoSrcHashValidation else 0), "Source folder was modified by build process"
	return v_BuildResult

if __name__ == '__main__':
	import sys
	sys.exit(main(sys.argv[1:]))
